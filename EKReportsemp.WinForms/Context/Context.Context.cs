//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EKReportsemp.WinForms.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SEMP2013_Context : DbContext
    {
        public SEMP2013_Context()
            : base("name=SEMP2013_Context")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<artventas> artventas { get; set; }
        public virtual DbSet<contratos> contratos { get; set; }
        public virtual DbSet<Localidades> Localidades { get; set; }
        public virtual DbSet<abono> abono { get; set; }
        public virtual DbSet<almacenaje> almacenaje { get; set; }
        public virtual DbSet<anterior_abono> anterior_abono { get; set; }
        public virtual DbSet<Apartados> Apartados { get; set; }
        public virtual DbSet<Apartados_confg> Apartados_confg { get; set; }
        public virtual DbSet<artventas101> artventas101 { get; set; }
        public virtual DbSet<artventas201> artventas201 { get; set; }
        public virtual DbSet<artventas501> artventas501 { get; set; }
        public virtual DbSet<artventas901> artventas901 { get; set; }
        public virtual DbSet<Auditoria> Auditoria { get; set; }
        public virtual DbSet<auditoria_fisica> auditoria_fisica { get; set; }
        public virtual DbSet<auditoria_resumen> auditoria_resumen { get; set; }
        public virtual DbSet<autorizaciones_prestamos> autorizaciones_prestamos { get; set; }
        public virtual DbSet<auxiliar_puesto> auxiliar_puesto { get; set; }
        public virtual DbSet<bolsas_ORO> bolsas_ORO { get; set; }
        public virtual DbSet<bolsas_OTROS> bolsas_OTROS { get; set; }
        public virtual DbSet<borrorem> borrorem { get; set; }
        public virtual DbSet<CAJA_AUXILIAR> CAJA_AUXILIAR { get; set; }
        public virtual DbSet<caja1> caja1 { get; set; }
        public virtual DbSet<calificacion_aud> calificacion_aud { get; set; }
        public virtual DbSet<clasificacion_cl> clasificacion_cl { get; set; }
        public virtual DbSet<clientes> clientes { get; set; }
        public virtual DbSet<CLON_APARTADOS> CLON_APARTADOS { get; set; }
        public virtual DbSet<CLON_contratos> CLON_contratos { get; set; }
        public virtual DbSet<CLONA> CLONA { get; set; }
        public virtual DbSet<clonartventas> clonartventas { get; set; }
        public virtual DbSet<CLONB> CLONB { get; set; }
        public virtual DbSet<clontabla> clontabla { get; set; }
        public virtual DbSet<cobros_poliza> cobros_poliza { get; set; }
        public virtual DbSet<comprobaciones> comprobaciones { get; set; }
        public virtual DbSet<comprobaciones_gastos> comprobaciones_gastos { get; set; }
        public virtual DbSet<Config_valores_plazos> Config_valores_plazos { get; set; }
        public virtual DbSet<contabilidad> contabilidad { get; set; }
        public virtual DbSet<contrato_conta> contrato_conta { get; set; }
        public virtual DbSet<Contrato_temporal> Contrato_temporal { get; set; }
        public virtual DbSet<CORREO> CORREO { get; set; }
        public virtual DbSet<costo_reimpresion> costo_reimpresion { get; set; }
        public virtual DbSet<depositos> depositos { get; set; }
        public virtual DbSet<depositos_tipo> depositos_tipo { get; set; }
        public virtual DbSet<descuentos_distintos> descuentos_distintos { get; set; }
        public virtual DbSet<documentos> documentos { get; set; }
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<Empresas> Empresas { get; set; }
        public virtual DbSet<Envios> Envios { get; set; }
        public virtual DbSet<estado_civil> estado_civil { get; set; }
        public virtual DbSet<EstadosRepublica> EstadosRepublica { get; set; }
        public virtual DbSet<EstatusApartado> EstatusApartado { get; set; }
        public virtual DbSet<EstatusContratos> EstatusContratos { get; set; }
        public virtual DbSet<EstatusInventarios> EstatusInventarios { get; set; }
        public virtual DbSet<ETQ_VENTA> ETQ_VENTA { get; set; }
        public virtual DbSet<FactCO> FactCO { get; set; }
        public virtual DbSet<FactCTR> FactCTR { get; set; }
        public virtual DbSet<factura_conta> factura_conta { get; set; }
        public virtual DbSet<facturas> facturas { get; set; }
        public virtual DbSet<fechasAU> fechasAU { get; set; }
        public virtual DbSet<gastos> gastos { get; set; }
        public virtual DbSet<GradoEstudios> GradoEstudios { get; set; }
        public virtual DbSet<INFS> INFS { get; set; }
        public virtual DbSet<interes> interes { get; set; }
        public virtual DbSet<interes_conta> interes_conta { get; set; }
        public virtual DbSet<inventariopromocion> inventariopromocion { get; set; }
        public virtual DbSet<marcas_localidad> marcas_localidad { get; set; }
        public virtual DbSet<Niveles_acceso> Niveles_acceso { get; set; }
        public virtual DbSet<Noticias_SEMP2013> Noticias_SEMP2013 { get; set; }
        public virtual DbSet<paises> paises { get; set; }
        public virtual DbSet<prestamos_poliza> prestamos_poliza { get; set; }
        public virtual DbSet<PRG11> PRG11 { get; set; }
        public virtual DbSet<PRG12> PRG12 { get; set; }
        public virtual DbSet<prom_aplica> prom_aplica { get; set; }
        public virtual DbSet<prom_aumento> prom_aumento { get; set; }
        public virtual DbSet<prom_descuento_interes> prom_descuento_interes { get; set; }
        public virtual DbSet<prom_ventas> prom_ventas { get; set; }
        public virtual DbSet<promocioncaja> promocioncaja { get; set; }
        public virtual DbSet<promociones> promociones { get; set; }
        public virtual DbSet<promociones_Activas> promociones_Activas { get; set; }
        public virtual DbSet<promocionesregalo> promocionesregalo { get; set; }
        public virtual DbSet<PRVyusuarios> PRVyusuarios { get; set; }
        public virtual DbSet<Puestos> Puestos { get; set; }
        public virtual DbSet<puntos_confg> puntos_confg { get; set; }
        public virtual DbSet<refrendo> refrendo { get; set; }
        public virtual DbSet<Reimpresiones> Reimpresiones { get; set; }
        public virtual DbSet<remate_inventarios> remate_inventarios { get; set; }
        public virtual DbSet<remisiones> remisiones { get; set; }
        public virtual DbSet<Respaldos> Respaldos { get; set; }
        public virtual DbSet<Retiros> Retiros { get; set; }
        public virtual DbSet<seguro> seguro { get; set; }
        public virtual DbSet<selcaja> selcaja { get; set; }
        public virtual DbSet<sexos> sexos { get; set; }
        public virtual DbSet<siglasempresa> siglasempresa { get; set; }
        public virtual DbSet<tabla_result> tabla_result { get; set; }
        public virtual DbSet<TASA_PRESTAMOS> TASA_PRESTAMOS { get; set; }
        public virtual DbSet<TEMP_AVALUO> TEMP_AVALUO { get; set; }
        public virtual DbSet<TEMP_AVALUO2> TEMP_AVALUO2 { get; set; }
        public virtual DbSet<tipos_localidad> tipos_localidad { get; set; }
        public virtual DbSet<TPavaluos> TPavaluos { get; set; }
        public virtual DbSet<transferencias> transferencias { get; set; }
        public virtual DbSet<TRFENTRADA> TRFENTRADA { get; set; }
        public virtual DbSet<VALOR_FACTORES> VALOR_FACTORES { get; set; }
        public virtual DbSet<VALOR_FACTORES_MAS> VALOR_FACTORES_MAS { get; set; }
        public virtual DbSet<vencidos> vencidos { get; set; }
    
        public virtual ObjectResult<APARTADOS_FUNCION_Result> APARTADOS_FUNCION(string fOLIOAPARTADO)
        {
            var fOLIOAPARTADOParameter = fOLIOAPARTADO != null ?
                new ObjectParameter("FOLIOAPARTADO", fOLIOAPARTADO) :
                new ObjectParameter("FOLIOAPARTADO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APARTADOS_FUNCION_Result>("APARTADOS_FUNCION", fOLIOAPARTADOParameter);
        }
    
        public virtual ObjectResult<CAJA_AUXILIAR_FUNCION_Result> CAJA_AUXILIAR_FUNCION(string fOLIOAPARTADO_A)
        {
            var fOLIOAPARTADO_AParameter = fOLIOAPARTADO_A != null ?
                new ObjectParameter("FOLIOAPARTADO_A", fOLIOAPARTADO_A) :
                new ObjectParameter("FOLIOAPARTADO_A", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CAJA_AUXILIAR_FUNCION_Result>("CAJA_AUXILIAR_FUNCION", fOLIOAPARTADO_AParameter);
        }
    
        public virtual ObjectResult<clientes_funcion_Result> clientes_funcion(string clienteID)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("clienteID", clienteID) :
                new ObjectParameter("clienteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<clientes_funcion_Result>("clientes_funcion", clienteIDParameter);
        }
    
        public virtual ObjectResult<ConsultaContratosAuditoria_Result> ConsultaContratosAuditoria(Nullable<int> inputParam, string contrato, ObjectParameter mSG)
        {
            var inputParamParameter = inputParam.HasValue ?
                new ObjectParameter("inputParam", inputParam) :
                new ObjectParameter("inputParam", typeof(int));
    
            var contratoParameter = contrato != null ?
                new ObjectParameter("contrato", contrato) :
                new ObjectParameter("contrato", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsultaContratosAuditoria_Result>("ConsultaContratosAuditoria", inputParamParameter, contratoParameter, mSG);
        }
    
        public virtual ObjectResult<facturas_funcion_Result> facturas_funcion(string nota_de_pago)
        {
            var nota_de_pagoParameter = nota_de_pago != null ?
                new ObjectParameter("nota_de_pago", nota_de_pago) :
                new ObjectParameter("nota_de_pago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<facturas_funcion_Result>("facturas_funcion", nota_de_pagoParameter);
        }
    
        public virtual ObjectResult<string> FUNCION_avaluos(string tipoavaluo)
        {
            var tipoavaluoParameter = tipoavaluo != null ?
                new ObjectParameter("tipoavaluo", tipoavaluo) :
                new ObjectParameter("tipoavaluo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FUNCION_avaluos", tipoavaluoParameter);
        }
    
        public virtual ObjectResult<FUNCION_BOLSAS_ORO_Result> FUNCION_BOLSAS_ORO(string cONTRATO)
        {
            var cONTRATOParameter = cONTRATO != null ?
                new ObjectParameter("CONTRATO", cONTRATO) :
                new ObjectParameter("CONTRATO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_BOLSAS_ORO_Result>("FUNCION_BOLSAS_ORO", cONTRATOParameter);
        }
    
        public virtual ObjectResult<FUNCION_BOLSAS_OTROS_Result> FUNCION_BOLSAS_OTROS(string cONTRATO)
        {
            var cONTRATOParameter = cONTRATO != null ?
                new ObjectParameter("CONTRATO", cONTRATO) :
                new ObjectParameter("CONTRATO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_BOLSAS_OTROS_Result>("FUNCION_BOLSAS_OTROS", cONTRATOParameter);
        }
    
        public virtual ObjectResult<FUNCION_CLIENTES_C_Result> FUNCION_CLIENTES_C(string iD)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_CLIENTES_C_Result>("FUNCION_CLIENTES_C", iDParameter);
        }
    
        public virtual ObjectResult<FUNCION_CONTRATO_Result> FUNCION_CONTRATO(string cONTRATO)
        {
            var cONTRATOParameter = cONTRATO != null ?
                new ObjectParameter("CONTRATO", cONTRATO) :
                new ObjectParameter("CONTRATO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_CONTRATO_Result>("FUNCION_CONTRATO", cONTRATOParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> FUNCION_COSTO_REIMPRESION()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("FUNCION_COSTO_REIMPRESION");
        }
    
        public virtual ObjectResult<FUNCION_EMPRESAS_Result> FUNCION_EMPRESAS(string eMPRESA)
        {
            var eMPRESAParameter = eMPRESA != null ?
                new ObjectParameter("EMPRESA", eMPRESA) :
                new ObjectParameter("EMPRESA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_EMPRESAS_Result>("FUNCION_EMPRESAS", eMPRESAParameter);
        }
    
        public virtual ObjectResult<FUNCION_IVA_Result> FUNCION_IVA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_IVA_Result>("FUNCION_IVA");
        }
    
        public virtual ObjectResult<string> FUNCION_plazos_prestamos(string pLAZO)
        {
            var pLAZOParameter = pLAZO != null ?
                new ObjectParameter("PLAZO", pLAZO) :
                new ObjectParameter("PLAZO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FUNCION_plazos_prestamos", pLAZOParameter);
        }
    
        public virtual ObjectResult<FUNCION_TEMPORAL_PLAZO_Result> FUNCION_TEMPORAL_PLAZO(string cONTRATO)
        {
            var cONTRATOParameter = cONTRATO != null ?
                new ObjectParameter("CONTRATO", cONTRATO) :
                new ObjectParameter("CONTRATO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FUNCION_TEMPORAL_PLAZO_Result>("FUNCION_TEMPORAL_PLAZO", cONTRATOParameter);
        }
    
        public virtual ObjectResult<localidades_funcion_Result> localidades_funcion(string localidad)
        {
            var localidadParameter = localidad != null ?
                new ObjectParameter("localidad", localidad) :
                new ObjectParameter("localidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<localidades_funcion_Result>("localidades_funcion", localidadParameter);
        }
    
        public virtual ObjectResult<remision_impresion_Result> remision_impresion(string numremision)
        {
            var numremisionParameter = numremision != null ?
                new ObjectParameter("numremision", numremision) :
                new ObjectParameter("numremision", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<remision_impresion_Result>("remision_impresion", numremisionParameter);
        }
    
        public virtual ObjectResult<string> SP_BuscarClientesNombre(Nullable<int> opcion, string buscar, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_BuscarClientesNombre", opcionParameter, buscarParameter, msg);
        }
    
        public virtual ObjectResult<SP_BuscarUsuario_Result> SP_BuscarUsuario(string uSUARIO, string cONTRASEÑA, ObjectParameter mSG)
        {
            var uSUARIOParameter = uSUARIO != null ?
                new ObjectParameter("USUARIO", uSUARIO) :
                new ObjectParameter("USUARIO", typeof(string));
    
            var cONTRASEÑAParameter = cONTRASEÑA != null ?
                new ObjectParameter("CONTRASEÑA", cONTRASEÑA) :
                new ObjectParameter("CONTRASEÑA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarUsuario_Result>("SP_BuscarUsuario", uSUARIOParameter, cONTRASEÑAParameter, mSG);
        }
    
        public virtual ObjectResult<string> SP_CancelOperacionesCaja(Nullable<int> opcion, Nullable<int> contrato, string comentario, string cajaN, string caja, string usuario, string notaPago, string rEMISION, string cLIENTE, string folioA, string fecha, Nullable<int> autos, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var contratoParameter = contrato.HasValue ?
                new ObjectParameter("contrato", contrato) :
                new ObjectParameter("contrato", typeof(int));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var cajaNParameter = cajaN != null ?
                new ObjectParameter("cajaN", cajaN) :
                new ObjectParameter("cajaN", typeof(string));
    
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var notaPagoParameter = notaPago != null ?
                new ObjectParameter("notaPago", notaPago) :
                new ObjectParameter("notaPago", typeof(string));
    
            var rEMISIONParameter = rEMISION != null ?
                new ObjectParameter("REMISION", rEMISION) :
                new ObjectParameter("REMISION", typeof(string));
    
            var cLIENTEParameter = cLIENTE != null ?
                new ObjectParameter("CLIENTE", cLIENTE) :
                new ObjectParameter("CLIENTE", typeof(string));
    
            var folioAParameter = folioA != null ?
                new ObjectParameter("folioA", folioA) :
                new ObjectParameter("folioA", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var autosParameter = autos.HasValue ?
                new ObjectParameter("Autos", autos) :
                new ObjectParameter("Autos", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CancelOperacionesCaja", opcionParameter, contratoParameter, comentarioParameter, cajaNParameter, cajaParameter, usuarioParameter, notaPagoParameter, rEMISIONParameter, cLIENTEParameter, folioAParameter, fechaParameter, autosParameter, msg);
        }
    
        public virtual ObjectResult<SP_CobroDeApartados_Result> SP_CobroDeApartados(Nullable<int> opcion, string inventario, string folio_apartado, string nombre_plazo, string cajaN, string caja, string fecha, string hora, string concepto, string folio, Nullable<decimal> debe, Nullable<decimal> haber, Nullable<decimal> saldo, string usuario, string cliente, string tIPO_MOV, string tIPO_OPERACION, string fueMinimo, Nullable<decimal> apartado_no, Nullable<decimal> abono, Nullable<decimal> abono_acumulado, Nullable<decimal> abonoCantidad, string iDCLIENTE, Nullable<decimal> penalizacion_por, Nullable<decimal> cancelacion_por, Nullable<int> dias_minimo, Nullable<int> dias_normal, Nullable<int> dias_tolerancia, Nullable<decimal> apartado_min, Nullable<decimal> apartado_norm, Nullable<decimal> apartado_con, string folio_NOCONVERTIDO, string tipo_apartado, string label11, Nullable<decimal> label12, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var inventarioParameter = inventario != null ?
                new ObjectParameter("inventario", inventario) :
                new ObjectParameter("inventario", typeof(string));
    
            var folio_apartadoParameter = folio_apartado != null ?
                new ObjectParameter("folio_apartado", folio_apartado) :
                new ObjectParameter("folio_apartado", typeof(string));
    
            var nombre_plazoParameter = nombre_plazo != null ?
                new ObjectParameter("Nombre_plazo", nombre_plazo) :
                new ObjectParameter("Nombre_plazo", typeof(string));
    
            var cajaNParameter = cajaN != null ?
                new ObjectParameter("cajaN", cajaN) :
                new ObjectParameter("cajaN", typeof(string));
    
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("concepto", concepto) :
                new ObjectParameter("concepto", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var debeParameter = debe.HasValue ?
                new ObjectParameter("debe", debe) :
                new ObjectParameter("debe", typeof(decimal));
    
            var haberParameter = haber.HasValue ?
                new ObjectParameter("haber", haber) :
                new ObjectParameter("haber", typeof(decimal));
    
            var saldoParameter = saldo.HasValue ?
                new ObjectParameter("saldo", saldo) :
                new ObjectParameter("saldo", typeof(decimal));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var tIPO_MOVParameter = tIPO_MOV != null ?
                new ObjectParameter("TIPO_MOV", tIPO_MOV) :
                new ObjectParameter("TIPO_MOV", typeof(string));
    
            var tIPO_OPERACIONParameter = tIPO_OPERACION != null ?
                new ObjectParameter("TIPO_OPERACION", tIPO_OPERACION) :
                new ObjectParameter("TIPO_OPERACION", typeof(string));
    
            var fueMinimoParameter = fueMinimo != null ?
                new ObjectParameter("FueMinimo", fueMinimo) :
                new ObjectParameter("FueMinimo", typeof(string));
    
            var apartado_noParameter = apartado_no.HasValue ?
                new ObjectParameter("apartado_no", apartado_no) :
                new ObjectParameter("apartado_no", typeof(decimal));
    
            var abonoParameter = abono.HasValue ?
                new ObjectParameter("abono", abono) :
                new ObjectParameter("abono", typeof(decimal));
    
            var abono_acumuladoParameter = abono_acumulado.HasValue ?
                new ObjectParameter("abono_acumulado", abono_acumulado) :
                new ObjectParameter("abono_acumulado", typeof(decimal));
    
            var abonoCantidadParameter = abonoCantidad.HasValue ?
                new ObjectParameter("abonoCantidad", abonoCantidad) :
                new ObjectParameter("abonoCantidad", typeof(decimal));
    
            var iDCLIENTEParameter = iDCLIENTE != null ?
                new ObjectParameter("IDCLIENTE", iDCLIENTE) :
                new ObjectParameter("IDCLIENTE", typeof(string));
    
            var penalizacion_porParameter = penalizacion_por.HasValue ?
                new ObjectParameter("penalizacion_por", penalizacion_por) :
                new ObjectParameter("penalizacion_por", typeof(decimal));
    
            var cancelacion_porParameter = cancelacion_por.HasValue ?
                new ObjectParameter("cancelacion_por", cancelacion_por) :
                new ObjectParameter("cancelacion_por", typeof(decimal));
    
            var dias_minimoParameter = dias_minimo.HasValue ?
                new ObjectParameter("dias_minimo", dias_minimo) :
                new ObjectParameter("dias_minimo", typeof(int));
    
            var dias_normalParameter = dias_normal.HasValue ?
                new ObjectParameter("dias_normal", dias_normal) :
                new ObjectParameter("dias_normal", typeof(int));
    
            var dias_toleranciaParameter = dias_tolerancia.HasValue ?
                new ObjectParameter("dias_tolerancia", dias_tolerancia) :
                new ObjectParameter("dias_tolerancia", typeof(int));
    
            var apartado_minParameter = apartado_min.HasValue ?
                new ObjectParameter("apartado_min", apartado_min) :
                new ObjectParameter("apartado_min", typeof(decimal));
    
            var apartado_normParameter = apartado_norm.HasValue ?
                new ObjectParameter("apartado_norm", apartado_norm) :
                new ObjectParameter("apartado_norm", typeof(decimal));
    
            var apartado_conParameter = apartado_con.HasValue ?
                new ObjectParameter("apartado_con", apartado_con) :
                new ObjectParameter("apartado_con", typeof(decimal));
    
            var folio_NOCONVERTIDOParameter = folio_NOCONVERTIDO != null ?
                new ObjectParameter("folio_NOCONVERTIDO", folio_NOCONVERTIDO) :
                new ObjectParameter("folio_NOCONVERTIDO", typeof(string));
    
            var tipo_apartadoParameter = tipo_apartado != null ?
                new ObjectParameter("tipo_apartado", tipo_apartado) :
                new ObjectParameter("tipo_apartado", typeof(string));
    
            var label11Parameter = label11 != null ?
                new ObjectParameter("label11", label11) :
                new ObjectParameter("label11", typeof(string));
    
            var label12Parameter = label12.HasValue ?
                new ObjectParameter("label12", label12) :
                new ObjectParameter("label12", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CobroDeApartados_Result>("SP_CobroDeApartados", opcionParameter, inventarioParameter, folio_apartadoParameter, nombre_plazoParameter, cajaNParameter, cajaParameter, fechaParameter, horaParameter, conceptoParameter, folioParameter, debeParameter, haberParameter, saldoParameter, usuarioParameter, clienteParameter, tIPO_MOVParameter, tIPO_OPERACIONParameter, fueMinimoParameter, apartado_noParameter, abonoParameter, abono_acumuladoParameter, abonoCantidadParameter, iDCLIENTEParameter, penalizacion_porParameter, cancelacion_porParameter, dias_minimoParameter, dias_normalParameter, dias_toleranciaParameter, apartado_minParameter, apartado_normParameter, apartado_conParameter, folio_NOCONVERTIDOParameter, tipo_apartadoParameter, label11Parameter, label12Parameter, msg);
        }
    
        public virtual ObjectResult<SP_CobroDeDepositos_Result> SP_CobroDeDepositos(Nullable<int> opcion, string caja, Nullable<decimal> deposito, string cajaN, string concepto, string folio, string usuario, string comentario, string tipoDeposito, string fecha, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var depositoParameter = deposito.HasValue ?
                new ObjectParameter("deposito", deposito) :
                new ObjectParameter("deposito", typeof(decimal));
    
            var cajaNParameter = cajaN != null ?
                new ObjectParameter("cajaN", cajaN) :
                new ObjectParameter("cajaN", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("concepto", concepto) :
                new ObjectParameter("concepto", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var tipoDepositoParameter = tipoDeposito != null ?
                new ObjectParameter("tipoDeposito", tipoDeposito) :
                new ObjectParameter("tipoDeposito", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CobroDeDepositos_Result>("SP_CobroDeDepositos", opcionParameter, cajaParameter, depositoParameter, cajaNParameter, conceptoParameter, folioParameter, usuarioParameter, comentarioParameter, tipoDepositoParameter, fechaParameter, msg);
        }
    
        public virtual ObjectResult<SP_CobroDeReimpresiones_Result> SP_CobroDeReimpresiones(string cajaN, string caja, string folio, string contrato, Nullable<decimal> costo, string comentario, string usuario, string fecha, string reimpresion, string reimpreso, string cliente, string id, string mISMO, string tIPO, ObjectParameter msg)
        {
            var cajaNParameter = cajaN != null ?
                new ObjectParameter("cajaN", cajaN) :
                new ObjectParameter("cajaN", typeof(string));
    
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var contratoParameter = contrato != null ?
                new ObjectParameter("contrato", contrato) :
                new ObjectParameter("contrato", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("costo", costo) :
                new ObjectParameter("costo", typeof(decimal));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var reimpresionParameter = reimpresion != null ?
                new ObjectParameter("reimpresion", reimpresion) :
                new ObjectParameter("reimpresion", typeof(string));
    
            var reimpresoParameter = reimpreso != null ?
                new ObjectParameter("reimpreso", reimpreso) :
                new ObjectParameter("reimpreso", typeof(string));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var mISMOParameter = mISMO != null ?
                new ObjectParameter("MISMO", mISMO) :
                new ObjectParameter("MISMO", typeof(string));
    
            var tIPOParameter = tIPO != null ?
                new ObjectParameter("TIPO", tIPO) :
                new ObjectParameter("TIPO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CobroDeReimpresiones_Result>("SP_CobroDeReimpresiones", cajaNParameter, cajaParameter, folioParameter, contratoParameter, costoParameter, comentarioParameter, usuarioParameter, fechaParameter, reimpresionParameter, reimpresoParameter, clienteParameter, idParameter, mISMOParameter, tIPOParameter, msg);
        }
    
        public virtual ObjectResult<string> SP_CobroDeRemisiones(string caja, Nullable<int> opcion, Nullable<int> contrato, string buscar, string cajan, string fecha, string hora, string concepto, string folio, string debe, string haber, string saldo, string usuario, string noinv, string folioApartado, string no, string estado, string abono, string abonoAcumulado, string cliente, string suc, string vendio, string inventario, string remision, string precioVenta, string precioOrigen, string apartado_numero, string tipo, string otrosFolio, string descuento, string tipo_desc, string noserie, string descripcion, string kilates, string peso_real, string rematado, string rematadoEJ, string condiciones, string importe, string rematado_por, string transferido, string clave, string precioPromo, ObjectParameter msg)
        {
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var contratoParameter = contrato.HasValue ?
                new ObjectParameter("contrato", contrato) :
                new ObjectParameter("contrato", typeof(int));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            var cajanParameter = cajan != null ?
                new ObjectParameter("cajan", cajan) :
                new ObjectParameter("cajan", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            var horaParameter = hora != null ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("concepto", concepto) :
                new ObjectParameter("concepto", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var debeParameter = debe != null ?
                new ObjectParameter("debe", debe) :
                new ObjectParameter("debe", typeof(string));
    
            var haberParameter = haber != null ?
                new ObjectParameter("haber", haber) :
                new ObjectParameter("haber", typeof(string));
    
            var saldoParameter = saldo != null ?
                new ObjectParameter("saldo", saldo) :
                new ObjectParameter("saldo", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var noinvParameter = noinv != null ?
                new ObjectParameter("noinv", noinv) :
                new ObjectParameter("noinv", typeof(string));
    
            var folioApartadoParameter = folioApartado != null ?
                new ObjectParameter("folioApartado", folioApartado) :
                new ObjectParameter("folioApartado", typeof(string));
    
            var noParameter = no != null ?
                new ObjectParameter("no", no) :
                new ObjectParameter("no", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var abonoParameter = abono != null ?
                new ObjectParameter("abono", abono) :
                new ObjectParameter("abono", typeof(string));
    
            var abonoAcumuladoParameter = abonoAcumulado != null ?
                new ObjectParameter("abonoAcumulado", abonoAcumulado) :
                new ObjectParameter("abonoAcumulado", typeof(string));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var sucParameter = suc != null ?
                new ObjectParameter("suc", suc) :
                new ObjectParameter("suc", typeof(string));
    
            var vendioParameter = vendio != null ?
                new ObjectParameter("vendio", vendio) :
                new ObjectParameter("vendio", typeof(string));
    
            var inventarioParameter = inventario != null ?
                new ObjectParameter("inventario", inventario) :
                new ObjectParameter("inventario", typeof(string));
    
            var remisionParameter = remision != null ?
                new ObjectParameter("remision", remision) :
                new ObjectParameter("remision", typeof(string));
    
            var precioVentaParameter = precioVenta != null ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(string));
    
            var precioOrigenParameter = precioOrigen != null ?
                new ObjectParameter("precioOrigen", precioOrigen) :
                new ObjectParameter("precioOrigen", typeof(string));
    
            var apartado_numeroParameter = apartado_numero != null ?
                new ObjectParameter("apartado_numero", apartado_numero) :
                new ObjectParameter("apartado_numero", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var otrosFolioParameter = otrosFolio != null ?
                new ObjectParameter("otrosFolio", otrosFolio) :
                new ObjectParameter("otrosFolio", typeof(string));
    
            var descuentoParameter = descuento != null ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(string));
    
            var tipo_descParameter = tipo_desc != null ?
                new ObjectParameter("tipo_desc", tipo_desc) :
                new ObjectParameter("tipo_desc", typeof(string));
    
            var noserieParameter = noserie != null ?
                new ObjectParameter("noserie", noserie) :
                new ObjectParameter("noserie", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var kilatesParameter = kilates != null ?
                new ObjectParameter("kilates", kilates) :
                new ObjectParameter("kilates", typeof(string));
    
            var peso_realParameter = peso_real != null ?
                new ObjectParameter("peso_real", peso_real) :
                new ObjectParameter("peso_real", typeof(string));
    
            var rematadoParameter = rematado != null ?
                new ObjectParameter("rematado", rematado) :
                new ObjectParameter("rematado", typeof(string));
    
            var rematadoEJParameter = rematadoEJ != null ?
                new ObjectParameter("rematadoEJ", rematadoEJ) :
                new ObjectParameter("rematadoEJ", typeof(string));
    
            var condicionesParameter = condiciones != null ?
                new ObjectParameter("condiciones", condiciones) :
                new ObjectParameter("condiciones", typeof(string));
    
            var importeParameter = importe != null ?
                new ObjectParameter("importe", importe) :
                new ObjectParameter("importe", typeof(string));
    
            var rematado_porParameter = rematado_por != null ?
                new ObjectParameter("rematado_por", rematado_por) :
                new ObjectParameter("rematado_por", typeof(string));
    
            var transferidoParameter = transferido != null ?
                new ObjectParameter("transferido", transferido) :
                new ObjectParameter("transferido", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("clave", clave) :
                new ObjectParameter("clave", typeof(string));
    
            var precioPromoParameter = precioPromo != null ?
                new ObjectParameter("precioPromo", precioPromo) :
                new ObjectParameter("precioPromo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_CobroDeRemisiones", cajaParameter, opcionParameter, contratoParameter, buscarParameter, cajanParameter, fechaParameter, horaParameter, conceptoParameter, folioParameter, debeParameter, haberParameter, saldoParameter, usuarioParameter, noinvParameter, folioApartadoParameter, noParameter, estadoParameter, abonoParameter, abonoAcumuladoParameter, clienteParameter, sucParameter, vendioParameter, inventarioParameter, remisionParameter, precioVentaParameter, precioOrigenParameter, apartado_numeroParameter, tipoParameter, otrosFolioParameter, descuentoParameter, tipo_descParameter, noserieParameter, descripcionParameter, kilatesParameter, peso_realParameter, rematadoParameter, rematadoEJParameter, condicionesParameter, importeParameter, rematado_porParameter, transferidoParameter, claveParameter, precioPromoParameter, msg);
        }
    
        public virtual ObjectResult<SP_CobroDeRetiros_Result> SP_CobroDeRetiros(Nullable<int> opcion, string caja, Nullable<decimal> retiro, string cajaN, string concepto, string folio, string usuario, string comentario, string tipoRetiro, string noOperador, string perteneceA, string autorizo, string fecha, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var cajaParameter = caja != null ?
                new ObjectParameter("caja", caja) :
                new ObjectParameter("caja", typeof(string));
    
            var retiroParameter = retiro.HasValue ?
                new ObjectParameter("retiro", retiro) :
                new ObjectParameter("retiro", typeof(decimal));
    
            var cajaNParameter = cajaN != null ?
                new ObjectParameter("cajaN", cajaN) :
                new ObjectParameter("cajaN", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("concepto", concepto) :
                new ObjectParameter("concepto", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("folio", folio) :
                new ObjectParameter("folio", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("comentario", comentario) :
                new ObjectParameter("comentario", typeof(string));
    
            var tipoRetiroParameter = tipoRetiro != null ?
                new ObjectParameter("tipoRetiro", tipoRetiro) :
                new ObjectParameter("tipoRetiro", typeof(string));
    
            var noOperadorParameter = noOperador != null ?
                new ObjectParameter("noOperador", noOperador) :
                new ObjectParameter("noOperador", typeof(string));
    
            var perteneceAParameter = perteneceA != null ?
                new ObjectParameter("perteneceA", perteneceA) :
                new ObjectParameter("perteneceA", typeof(string));
    
            var autorizoParameter = autorizo != null ?
                new ObjectParameter("autorizo", autorizo) :
                new ObjectParameter("autorizo", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CobroDeRetiros_Result>("SP_CobroDeRetiros", opcionParameter, cajaParameter, retiroParameter, cajaNParameter, conceptoParameter, folioParameter, usuarioParameter, comentarioParameter, tipoRetiroParameter, noOperadorParameter, perteneceAParameter, autorizoParameter, fechaParameter, msg);
        }
    
        public virtual ObjectResult<SP_RemBuscarArtventas_Result> SP_RemBuscarArtventas(Nullable<int> opcion, string buscar, ObjectParameter msg)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_RemBuscarArtventas_Result>("SP_RemBuscarArtventas", opcionParameter, buscarParameter, msg);
        }
    
        public virtual ObjectResult<string> TiposDeAvaluoEnContratos(Nullable<int> opcion)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TiposDeAvaluoEnContratos", opcionParameter);
        }
    
        public virtual ObjectResult<string> TiposDeEstatusEnContratos(Nullable<int> opcion)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TiposDeEstatusEnContratos", opcionParameter);
        }
    }
}
